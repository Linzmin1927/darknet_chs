[net]
# Testing
# batch=1
# subdivisions=1
# Training
batch=64
subdivisions=16
width=416
height=416
channels=3
momentum=0.9
decay=0.0005
angle=0
saturation = 1.5
exposure = 1.5
hue=.1

learning_rate=0.001
#burn_in=1000
max_batches = 50000
policy=steps
steps=40000,45000
scales=.1,.1

######################
#  backbone start
######################

#1 Conv/s2
[convolutional]
batch_normalize=1
filters=32
size=3
stride=2
pad=1
# activation=relu
#output: 208*208*32

#2 Conv dw/s1
[convolutional]
batch_normalize=1
filters=32
groups=32
size=3
stride=1
pad=1
activation=relu
#output: 208*208*32

#3 Conv/s1
[convolutional]
batch_normalize=1
filters=64
size=1
stride=1
pad=0
activation=relu
#output: 208*208*64

#4 Conv dw/s2
[convolutional]
batch_normalize=1
filters=64
groups=64
size=3
stride=2
pad=1
activation=relu
#output: 104*104*64

#5 Conv/s1
[convolutional]
batch_normalize=1
filters=128
size=1
stride=1
pad=0
activation=relu
#output: 104*104*128

#6 Conv dw/s1
[convolutional]
batch_normalize=1
filters=128
groups=128
size=3
stride=1
pad=1
activation=relu
#output: 104*104*128

#7 Conv/s1
[convolutional]
batch_normalize=1
filters=128
size=1
stride=1
pad=0
activation=relu
#output: 104*104*128


#8 Conv dw/s2
[convolutional]
batch_normalize=1
filters=128
groups=128
size=3
stride=2
pad=1
activation=relu
#output: 52*52*128

#9 Conv/s1
[convolutional]
batch_normalize=1
filters=256
size=1
stride=1
pad=0
activation=relu
#output: 52*52*256

#10 Conv dw/s1
[convolutional]
batch_normalize=1
filters=256
groups=256
size=3
stride=1
pad=1
activation=relu
#output: 52*52*256

#11 Conv/s1
[convolutional]
batch_normalize=1
filters=256
size=1
stride=1
pad=0
activation=relu
#output: 52*52*256

#12 Conv dw/s2
[convolutional]
batch_normalize=1
filters=256
groups=256
size=3
stride=2
pad=1
activation=relu
#output: 26*26*256

#13 Conv/s1
[convolutional]
batch_normalize=1
filters=512
size=1
stride=1
pad=0
activation=relu
#output: 26*26*512

#14 Conv dw/s1
[convolutional]
batch_normalize=1
filters=512
groups=512
size=3
stride=1
pad=1
activation=relu
#output: 26*26*512


#15 Conv/s1
[convolutional]
batch_normalize=1
filters=512
size=1
stride=1
pad=0
activation=relu
#output: 26*26*512


#16 Conv dw/s1
[convolutional]
batch_normalize=1
filters=512
groups=512
size=3
stride=1
pad=1
activation=relu
#output: 26*26*512

#17 Conv/s1
[convolutional]
batch_normalize=1
filters=512
size=1
stride=1
pad=0
activation=relu
#output: 26*26*512


#18 Conv dw/s1
[convolutional]
batch_normalize=1
filters=512
groups=512
size=3
stride=1
pad=1
activation=relu
#output: 26*26*512


#19 Conv/s1
[convolutional]
batch_normalize=1
filters=512
size=1
stride=1
pad=0
activation=relu
#output: 26*26*512


#20 Conv dw/s1
[convolutional]
batch_normalize=1
filters=512
groups=512
size=3
stride=1
pad=1
activation=relu
#output: 26*26*512

#21 Conv/s1
[convolutional]
batch_normalize=1
filters=512
size=1
stride=1
pad=0
activation=relu
#output: 26*26*512


#22 Conv dw/s1
[convolutional]
batch_normalize=1
filters=512
groups=512
size=3
stride=1
pad=1
activation=relu
#output: 26*26*512

#23 Conv/s1
[convolutional]
batch_normalize=1
filters=512
size=1
stride=1
pad=0
activation=relu
#output: 26*26*512

#24 Conv dw/s2
[convolutional]
batch_normalize=1
filters=512
groups=512
size=3
stride=2
pad=1
activation=relu
#output: 13*13*512

#25 Conv/s1
[convolutional]
batch_normalize=1
filters=1024
size=1
stride=1
pad=0
activation=relu
#output: 13*13*1024


#26 Conv dw/s1 #这一层论文里的结构图似乎不对，原文为S2，但是s2输出应该为7*7*1024？
[convolutional]
batch_normalize=1
filters=1024
groups=1024
size=3
stride=1
pad=1
activation=relu
#output: 13*13*1024

#27 Conv/s1
[convolutional]
batch_normalize=1
filters=1024
size=1
stride=1
pad=0
activation=relu
#output: 13*13*1024


######################
#  backbone end
######################
#28 Conv/s1
[convolutional]
batch_normalize=1
filters=512
size=1
stride=1
pad=1
activation=leaky
#output: 13*13*512

#29 Conv/s1
[convolutional]
batch_normalize=1
size=3
stride=1
pad=1
filters=1024
activation=leaky
#output: 13*13*1024

#30 Conv/s1
[convolutional]
batch_normalize=1
filters=512
size=1
stride=1
pad=1
activation=leaky
#output: 13*13*512

#31 Conv/s1
[convolutional]
batch_normalize=1
size=3
stride=1
pad=1
filters=1024
activation=leaky
#output: 13*13*1024

#32 Conv/s1
[convolutional]
batch_normalize=1
filters=512
size=1
stride=1
pad=1
activation=leaky
#output: 13*13*512

#33 Conv/s1
[convolutional]
batch_normalize=1
size=3
stride=1
pad=1
filters=1024
activation=leaky
#output: 13*13*1024

#34 Conv/s1
[convolutional]
size=1
stride=1
pad=1
filters=255
activation=linear
#output: 13*13*255


#35 yolo
[yolo]
mask = 6,7,8
anchors = 10,13,  16,30,  33,23,  30,61,  62,45,  59,119,  116,90,  156,198,  373,326
classes=80
num=9
jitter=.3
ignore_thresh = .7
truth_thresh = 1
random=1

#36 route 32
[route]
layers = -4
#output: 13*13*512

#37
[convolutional]
batch_normalize=1
filters=256
size=1
stride=1
pad=0
activation=leaky
#output: 13*13*256

#38
[upsample]
stride=2
#output: 26*26*256

#39
[route]
layers = -1, 22
#output: 26*26*768

#40
[convolutional]
batch_normalize=1
filters=256
size=1
stride=1
pad=0
activation=leaky
#output: 26*26*256

#41
[convolutional]
batch_normalize=1
size=3
stride=1
pad=1
filters=512
activation=leaky
#output: 26*26*512

#42
[convolutional]
batch_normalize=1
filters=256
size=1
stride=1
pad=0
activation=leaky
#output: 26*26*256

#43
[convolutional]
batch_normalize=1
size=3
stride=1
pad=1
filters=512
activation=leaky
#output: 26*26*512

#44
[convolutional]
batch_normalize=1
filters=256
size=1
stride=1
pad=0
activation=leaky
#output: 26*26*256

#45
[convolutional]
batch_normalize=1
size=3
stride=1
pad=1
filters=512
activation=leaky
#output: 26*26*512

#46
[convolutional]
size=1
stride=1
pad=0
filters=255
activation=linear
#output: 26*26*255

#47
[yolo]
mask = 3,4,5
anchors = 10,13,  16,30,  33,23,  30,61,  62,45,  59,119,  116,90,  156,198,  373,326
classes=80
num=9
jitter=.3
ignore_thresh = .7
truth_thresh = 1
random=1


#48 route 
[route]
layers = -4
#output 26*26*256

#49
[convolutional]
batch_normalize=1
filters=128
size=1
stride=1
pad=0
activation=leaky
#output 26*26*128

#50
[upsample]
stride=2
#output 52*52*128

#51
[route]
layers = -1, 10
#output 52*52*384


#52
[convolutional]
batch_normalize=1
filters=128
size=1
stride=1
pad=0
activation=leaky
#output 52*52*128

#53
[convolutional]
batch_normalize=1
size=3
stride=1
pad=1
filters=256
activation=leaky
#output 52*52*256

#54
[convolutional]
batch_normalize=1
filters=128
size=1
stride=1
pad=0
activation=leaky
#output 52*52*128

#55
[convolutional]
batch_normalize=1
size=3
stride=1
pad=1
filters=256
activation=leaky
#output 52*52*256

#56
[convolutional]
batch_normalize=1
filters=128
size=1
stride=1
pad=1
activation=leaky
#output 52*52*128

#57
[convolutional]
batch_normalize=1
size=3
stride=1
pad=1
filters=256
activation=leaky
#output 52*52*256

#58
[convolutional]
size=1
stride=1
pad=0
filters=255
activation=linear
#output 52*52*255

#59
[yolo]
mask = 0,1,2
anchors = 10,13,  16,30,  33,23,  30,61,  62,45,  59,119,  116,90,  156,198,  373,326
classes=80
num=9
jitter=.3
ignore_thresh = .7
truth_thresh = 1
random=1

